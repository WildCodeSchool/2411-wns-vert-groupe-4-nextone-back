scalar DateTime

type Ticket {
  id: ID!
  code: String!
  firstName: String
  lastName: String
  email: String!
  phone: String
  status: Status
  service: Service!
  ticketLogs: [TicketLog!]!
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  tickets(pagination: PaginationInput): [Ticket!]
  ticket(id: ID!): Ticket
  ticketsByProperties(fields: TicketPropertiesInput!): [Ticket!]!
}

type Mutation {
  generateTicket(data: GenerateTicketInput!): Ticket!
  deleteTicket(id: ID!): DeletedTicketResponse!
  updateTicket(data: UpdateTicketInput!): Ticket
  updateTicketStatus(data: UpdateStatusTicketInput!): Ticket!
}

input PaginationInput {
  created: DateTime,
  limit: Int
}

input TicketPropertiesInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  status: [Status!]
  serviceId: ID
  createdAt: DateTime
  updatedAt: DateTime
  pagination: PaginationInput
}

input UpdateStatusTicketInput {
  id: ID!
  status: Status!
}

input GenerateTicketInput {
  firstName: String
  lastName: String
  email: String!
  phone: String
  status: Status
  serviceId: ID!
}

input UpdateTicketInput {
  id: ID!
  code: String
  firstName: String
  lastName: String
  email: String
  phone: String
  status: Status
  serviceId: ID
}

type DeletedTicketResponse {
  success: Boolean!
  message: String
}

# enum TicketStatus {
#   PENDING
#   CANCELED
#   DONE
# }

enum Status {
  CREATED
  CANCELED
  DONE
  PENDING
  ARCHIVED
  INPROGRESS
  DELETED
}
