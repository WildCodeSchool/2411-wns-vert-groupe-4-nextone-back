enum ManagerRole {
  OPERATOR
  ADMIN
  SUPER_ADMIN
}

type Manager {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  role: ManagerRole!
  is_globally_active: Boolean
  created_at: String
  updated_at: String
}

type ManagerWithoutPassword {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!  
  role: ManagerRole!
  is_globally_active: Boolean
  created_at: String
  updated_at: String
}

type Query {
  managers: [ManagerWithoutPassword!]
  manager(id: ID!): ManagerWithoutPassword!
  login(infos: InputLogin!): Auth
  logout: Message!
}

type Auth {
  manager: ManagerWithoutPassword
  token: String
}

type Message {
  content: String
  status: Boolean
}

type Mutation {
  createManager(infos: InputRegister!): Manager
  deleteManager(id: ID!): Message!
  updateManager(id: ID!, data: UpdateManagerInput!): ManagerWithoutPassword!
}

input InputRegister {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  role: ManagerRole = OPERATOR
  is_globally_active: Boolean = FALSE
}

input InputLogin {
  email: String!
  password: String!
}

input UpdateManagerInput {
  first_name: String
  last_name: String
  role: ManagerRole
}