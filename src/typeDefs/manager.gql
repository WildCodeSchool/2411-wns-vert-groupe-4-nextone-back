scalar DateTime


enum ManagerRole {
  OPERATOR
  ADMIN
  SUPER_ADMIN
}



type Manager {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: ManagerRole!
  isGloballyActive: Boolean!
  authorizations: [Authorization!]!
  company: Company!
  connectionLogs:  [ConnectionLog!]!
  ticketLogs: [TicketLog!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ManagerWithoutPassword {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: ManagerRole!
  isGloballyActive: Boolean!
  authorizations: [Authorization!]!
  connectionLogs:  [ConnectionLog!]!
  ticketLogs: [TicketLog!]!
  company: Company!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Auth {
  manager: ManagerWithoutPassword
  token: String
}

type Message {
  message: String
  success: Boolean 
}

type Query {
  managers: [ManagerWithoutPassword!]
  manager(id: ID!): ManagerWithoutPassword!
  login(infos: InputLogin!): Auth
  logout: Message!
}

type Mutation {
  createManager(infos: InputRegister!): Manager!
  deleteManager(id: ID!): Message!
  updateManager(id: ID!, data: UpdateManagerInput!): ManagerWithoutPassword!
  # associateManagerAtService(managerId: ID!, serviceId: ID!): Message!
  # dissociateManagerFromService(managerId: ID!, serviceId: ID!): Message!
  toggleGlobalAccessManager(id: UUID!): Message!
}

input InputRegister {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: ManagerRole = OPERATOR
  isGloballyActive: Boolean = FALSE
  companyId: UUID!
}

input InputLogin {
  email: String!
  password: String!
}

input UpdateManagerInput {
  firstName: String
  lastName: String
  role: ManagerRole
}