scalar DateTime
scalar UUID

enum Status {
  CREATED
  CANCELED
  DONE
  PENDING
  ARCHIVED
  INPROGRESS
}

type TicketLog {
  id: UUID!
  ticket: Ticket!
  manager: Manager
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
}


type Query {
  ticketLog(id: UUID!): TicketLog
  ticketLogs(pagination: PaginationInput): [TicketLog!]!
  ticketLogsByProperty(field: TicketLogPropertyInput!, pagination: PaginationInput): [TicketLog!]!
  ticketLogsByProperties(fields: TicketLogPropertiesInput!): [TicketLog!]!
  ticketLogsByCreationSlot(data: ByCreationSlotInput!): [TicketLog!]!
}

type Mutation {
  createTicketLog(data: CreateTicketLogInput!): TicketLog!
  updateTicketLog(data: UpdateTicketLogInput!): TicketLog
  deleteTicketLog(id: UUID!): DeleteResponse!
}

input ByCreationSlotInput {
  start: DateTime!
  end: DateTime!
  name: String!
  pagination: PaginationInput
}

input TicketLogPropertyInput @oneOf {
  ticketId: UUID
  managerId: UUID
  status: Status
  createdAt: DateTime
  updatedAt: DateTime
}

input TicketLogPropertiesInput  {
  ticketId: UUID
  managerId: UUID
  status: Status
  createdAt: DateTime
  updatedAt: DateTime
  pagination: PaginationInput
}

type DeleteResponse {
  message: String!
  success: Boolean!
}
# type DeleteResponse {
#   content: String!
#   success: Boolean!
# }

input CreateTicketLogInput {
  ticketId: UUID!
  managerId: UUID
  status: Status
}

input UpdateTicketLogInput {
  id: UUID!
  status: Status!
  managerId: UUID
}
